#!/bin/sh

prog_name='kvm_disk_util'
attached_lodevs=
mounted_devices=

errx ()
{
    r=$1
    shift
    echo "$@" 1>&2
    detach_all_lodevs
    exit $r
}

warnx ()
{
    echo "$@" 1>&2
}

exec_command ()
{
    warnx $@
    eval $@
    retval=$?
    if [ $retval != 0 ]; then
        errx $retval $@ exit with code $retval
    fi
}

attache_lodev ()
{
    lvname=$1
    if [ -z $lvname ]; then
        errx 1 "logical volume does not specified."
    fi
    if [ `sudo losetup -a | grep $lvname | wc -l` != 0 ]; then
        errx 1 "$lvname already attached."
    fi
    exec_command sudo losetup -f $lvname
    sudo losetup -a | grep $lvname | awk -F ':' '{print $1}'
}

detach_lodev ()
{
    lodev=$1
    if [ -z $lodev ]; then
        errx 1 "loopback device does not specified."
    fi
    try=0
    max_try=10
    while [ $try -lt $max_try ]; do
        sleep 1
        cmd="sudo losetup -d $lodev"
        warnx $cmd
        eval $cmd
        [ $? = 0 ] && break || :
        try=`expr $try + 1`
    done
    if [ $try = $max_try ]; then
        errx 1 losetup -d $lodev
    fi
}

add_partition_mappings ()
{
    lodev=$1
    if [ -z $lodev ]; then
        errx 1 "loopback device does not specified."
    fi
    if [ ! -e $lodev ]; then
        errx 1 "specified loopback device does not exist."
    fi
    exec_command sudo kpartx -a $lodev
    attached_lodevs="$attached_lodevs $lodev"
}

delete_partition_mappings ()
{
    lodev=$1
    if [ -z $lodev ]; then
        errx 1 "loopback device does not specified."
    fi
    if [ ! -e $lodev ]; then
        errx 1 "specified loopback device does not exist."
    fi
    try=0
    max_try=10
    while [ $try -lt $max_try ]; do
        sleep 1
        cmd="sudo kpartx -d $lodev"
        warnx $cmd
        eval $cmd
        [ $? = 0 ] && break || :
        try=`expr $try + 1`
    done
    if [ $try = $max_try ]; then
        errx 1 kpartx -d $lodev failed.
    fi
}

detach_all_lodevs ()
{
    for dev in $mounted_devices; do
        umount_filesystem $dev
    done
    for lodev in $attached_lodevs; do
        delete_partition_mappings $lodev
        detach_lodev $lodev
    done
}

detect_partition_device ()
{
    lodev=$1
    if [ -z $lodev ]; then
        errx 1 "loopback device does not specified."
    fi
    partition=/dev/mapper/`sudo kpartx -l $lodev | grep loop | head -n 1 | awk '{print $1}'`
    echo $partition
}

shrink_filesystem ()
{
    partition_device=$1
    if [ -z $partition_device ]; then
        errx 1 "partition_device does not specified."
    fi
    exec_command sudo e2fsck -p -f $partition_device >/dev/null
    exec_command sudo resize2fs -M $partition_device >/dev/null
    sleep 1
    exec_command sudo e2fsck -p -f $partition_device >/dev/null
}

restore_filesystem ()
{
    partition_device=$1
    if [ -z $partition_device ]; then
        errx 1 "partition_device does not specified."
    fi
    sleep 1
    exec_command sudo e2fsck -p -f $partition_device >/dev/null
    sleep 1
    exec_command sudo resize2fs $partition_device >/dev/null
    sleep 1
    exec_command sudo e2fsck -p -f $partition_device >/dev/null
}

calc_blocks_to_dd ()
{
    partition_device=$1
    if [ -z $partition_device ]; then
        errx 1 "partition_device device does not specified."
    fi
    block_count=`sudo dumpe2fs -h $partition_device 2>/dev/null | grep 'Block count' | awk '{print $3}'`
    expr $block_count \* 4096 / 1024 / 1024 + 1
}

clone_kvm_disk ()
{
    from_lodev=$1; shift
    dest_lodev=$1; shift
    blocks_to_dd=$1; shift
    exec_command sudo dd if=$from_lodev of=$dest_lodev bs=1M count=$blocks_to_dd
    add_partition_mappings $dest_lodev
    partition_device=`detect_partition_device $dest_lodev`
    restore_filesystem $partition_device
    delete_partition_mappings $dest_lodev
}

clone_disk_via_network ()
{
    source_lodev=$1
    blocks_to_dd=$2
    dest_hostname=$3
    dest_lodev=$4
    exec_command sudo dd if=$source_lodev bs=1M count=$blocks_to_dd | ssh $dest_hostname sudo dd of=$dest_lodev bs=1M
    exec_command ssh $dest_hostname sudo $prog_name add_partition_mappings $dest_lodev
    partition_device=`ssh $dest_hostname sudo $prog_name detect_partition_device $dest_lodev`
    exec_command ssh $dest_hostname sudo $prog_name restore_filesystem $partition_device
    exec_command ssh $dest_hostname sudo $prog_name delete_partition_mappings $dest_lodev
}

mount_filesystem ()
{
    partition_device=$1
    mount_point=$2
    if [ -z $partition_device ]; then
        errx 1 "partition_device does not specified."
    fi
    if [ -z $mount_point ]; then
        errx 1 "mount_point does not specified."
    fi
    exec_command sudo mount $partition_device $mount_point
    mounted_devices="$mounted_devices $partition_device"
}

umount_filesystem ()
{
    mount_point=$1
    if [ -z $mount_point ]; then
        errx 1 "mount_point does not specified."
    fi
    exec_command sudo umount $mount_point
}

set_hostname ()
{
    mount_point=$1
    hostname=$2
    if [ -z $mount_point ]; then
        errx 1 "mount_point does not specified."
    fi
    if [ -z $hostname ]; then
        errx 1 "hostname does not specified."
    fi
    sudo sh -c "echo $hostname > $mount_point/etc/hostname"
}

set_network_interface_info ()
{
    mount_point=$1
    ip_address=$2
    if [ -z $mount_point ]; then
        errx 1 "mount_point does not specified."
    fi
    if [ -z $ip_address ]; then
        errx 1 "ip_address does not specified."
    fi
    sudo ed $mount_point/etc/network/interfaces <<EOF
/iface eth0 inet static/
+1
s/^.*$/        address $ip_address/
w
q
EOF
}

copy_resolv_conf ()
{
    mount_point=$1
    if [ -z $mount_point ]; then
        errx 1 "mount_point does not specified."
    fi
    exec_command sudo cp /etc/resolv.conf $mount_point/etc/
}

set_postfix_conf ()
{
    mount_point=$1
    hostname=$2
    if [ -z $mount_point ]; then
        errx 1 "mount_point does not specified."
    fi
    if [ -z $hostname ]; then
        errx 1 "hostname does not specified."
    fi
    exec_command sudo cp /etc/postfix/main.cf $mount_point/etc/postfix/
    sudo ed $mount_point/etc/postfix/main.cf <<EOF
/^myhostname = /
s/^.*$/myhostname = $hostname/
w
q
EOF
}

clone ()
{
    source_logical_volume=$1
    target_logical_volume=$2
    if [ -z $source_logical_volume ]; then
        errx 1 "source_logical_volume does not specified."
    fi
    if [ -z $target_logical_volume ]; then
        errx 1 "target_logical_volume does not specified."
    fi
    source_loopback_device=`attache_lodev $source_logical_volume`
    add_partition_mappings $source_loopback_device
    partition_device=`detect_partition_device $source_loopback_device`
    shrink_filesystem $partition_device
    blocks_to_dd=`calc_blocks_to_dd $partition_device`
    target_loopback_device=`attache_lodev $target_logical_volume`
    clone_kvm_disk $source_loopback_device $target_loopback_device $blocks_to_dd
    detach_lodev $target_loopback_device
    restore_filesystem `detect_partition_device $source_loopback_device`
    delete_partition_mappings $source_loopback_device
    detach_lodev $source_loopback_device
}

remote_clone ()
{
    source_logical_volume=$1
    remote_hostname=$2
    remote_logical_volume=$3
    if [ -z $source_logical_volume ]; then
        errx 1 "source_logical_volume does not specified."
    fi
    if [ -z $remote_hostname ]; then
        errx 1 "remote_hostname does not specified."
    fi
    if [ -z $remote_logical_volume ]; then
        errx 1 "remote_logical_volume does not specified."
    fi
    source_loopback_device=`attache_lodev $source_logical_volume`
    add_partition_mappings $source_loopback_device
    partition_device=`detect_partition_device $source_loopback_device`
    shrink_filesystem $partition_device
    blocks_to_dd=`calc_blocks_to_dd $partition_device`
    remote_loopback_device=`ssh $remote_hostname $prog_name attache_lodev $remote_logical_volume`
    clone_disk_via_network $source_loopback_device $blocks_to_dd $remote_hostname $remote_loopback_device
    exec_command ssh $remote_hostname $prog_name detach_lodev $remote_loopback_device
    restore_filesystem `detect_partition_device $source_loopback_device`
    delete_partition_mappings $source_loopback_device
    detach_lodev $source_loopback_device
}

configure ()
{
    logical_volume=$1
    hostname=$2
    ip_address=$3
    working_mount_point=$4
    if [ -z $logical_volume ]; then
        errx 1 "logical volume does not specified."
    fi
    if [ -z $hostname ]; then
        errx 1 "hostname does not specified."
    fi
    if [ -z $ip_address ]; then
        errx 1 "ip_address does not specified."
    fi
    if [ -z $working_mount_point ]; then
        working_mount_point=/mnt
    fi
    # TODO: prams check
    lodev=`attache_lodev $logical_volume`
    add_partition_mappings $lodev
    mount_filesystem `detect_partition_device $lodev` $working_mount_point
    set_hostname $working_mount_point $hostname
    copy_resolv_conf $working_mount_point
    set_network_interface_info $working_mount_point $ip_address
    set_postfix_conf $working_mount_point $hostname
    umount_filesystem $working_mount_point
    delete_partition_mappings $lodev
    detach_lodev $lodev
}

usage ()
{
    echo usage: $prog_name [command] [options]
    echo
    echo kvm_disk_util commands are below:
    echo "    attache_lodev [logical volume path]"
    echo "    detach_lodev [loopback device]"
    echo "    add_partition_mappings [loopback device]"
    echo "    delete_partition_mappings [loopback device]"
    echo "    detect_partition_device [loopback device]"
    echo "    restore_filesystem [partition device]"
    echo "    clone [source logical volume path] [dest logical volume path]"
    echo "    configure [--hostname hostname] [--ipaddress ipaddress] [logical volume path]"
    exit 1
}

args=`getopt -o h:i: --long hostname:,ipaddress: -n $prog_name -- "$@"`
if [ $? != 0 ]; then echo "Terminationg...">&2 ; exit 1 ; fi
eval set -- "$args"

while true ; do
    case "$1" in
        --hostname)
            hostname=$2
            shift 2;;
        --ipaddress)
            ipaddress=$2
            shift 2;;
        --) shift; break ;;
        *) usage;
    esac
done

case "$1" in
    attache_lodev)
        attache_lodev $2
        break ;;
    detach_lodev)
        detach_lodev $2
        break ;;
    add_partition_mappings)
        add_partition_mappings $2
        break ;;
    delete_partition_mappings)
        delete_partition_mappings $2
        break ;;
    detect_partition_device)
        detect_partition_device $2
        break ;;
    restore_filesystem)
        restore_filesystem $2
        break ;;
    clone)
        if [ `echo $3 | grep ':' | wc -l` = 1 ]; then
            source_logical_volume=$2
            remote_hostname=`echo $3 | sed -e 's/\([^:]*\):.*/\1/g'`
            remote_logical_volume=`echo $3 | sed -e 's/.*:\([^:]*\)/\1/g'`
            remote_clone $source_logical_volume $remote_hostname $remote_logical_volume
        else
            source_logical_volume=$2
            target_logical_volume=$3
            clone $source_logical_volume $target_logical_volume
        fi
        break;;
    configure)
        logical_volume=$2
        configure $2 $hostname $ipaddress
        break;;
    *) usage;
esac

